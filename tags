!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/polaris/vscode/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
0	.vscode/launch.json	/^                {$/;"	o	array:configurations.0.setupCommands
0	.vscode/launch.json	/^        {$/;"	o	array:configurations
0	.vscode/tasks.json	/^          \/\/C++ 컴파일$/;"	z	array:tasks
1	.vscode/tasks.json	/^        \/\/C 컴파일$/;"	z	array:tasks
2	.vscode/tasks.json	/^        {$/;"	o	array:tasks
ADDRESS	old/namecards.c	/^#define ADDRESS /;"	d	file:
COLS	old/mutipointer_to_v.c	/^#define COLS /;"	d	file:
MAXLENGTH	old/strings.c	/^#define MAXLENGTH /;"	d	file:
MESSAGE	old/strings.c	/^#define MESSAGE /;"	d	file:
MIMode	.vscode/launch.json	/^            "MIMode": "gdb",$/;"	s	object:configurations.0
MONTHS	old/2d_arrow.c	/^#define MONTHS /;"	d	file:
NAME	old/namecards.c	/^#define NAME /;"	d	file:
NUM_LIMIT	old/function_to_strings.c	/^#define NUM_LIMIT /;"	d	file:
PunctCount	old/function_to_strings.c	/^int PunctCount(const char* str){$/;"	f	typeref:typename:int
ROWS	old/mutipointer_to_v.c	/^#define ROWS /;"	d	file:
STRLEN	old/input_strings.c	/^#define STRLEN /;"	d	file:
TEST	old/output_strings.c	/^#define TEST /;"	d	file:
ToUpper	old/function_to_strings.c	/^void ToUpper(char* str){$/;"	f	typeref:typename:void
WIDTH	old/namecards.c	/^#define WIDTH /;"	d	file:
YEARS	old/2d_arrow.c	/^#define YEARS /;"	d	file:
add_value	old/const_arr.c	/^void add_value(int arr[], const int n, const int val){$/;"	f	typeref:typename:void
args	.vscode/launch.json	/^            "args": [],$/;"	a	object:configurations.0
average	old/avg_arr.c	/^double average(double data_array[], int n){$/;"	f	typeref:typename:double
average	old/avg_arr2.c	/^double average(double *start, double *end){$/;"	f	typeref:typename:double
command	.vscode/tasks.json	/^            "command": "cd ${fileDirname} && .\/${fileBasenameNoExtension}",$/;"	s	object:tasks.2
configurations	.vscode/launch.json	/^    "configurations": [$/;"	a
custom_put	old/output_strings.c	/^void custom_put(const char* str){$/;"	f	typeref:typename:void
custom_put2	old/output_strings.c	/^int custom_put2(const char* str){$/;"	f	typeref:typename:int
custom_string_input	old/input_strings.c	/^char* custom_string_input(char* st, int n){$/;"	f	typeref:typename:char *
cwd	.vscode/launch.json	/^            "cwd": "${fileDirname}",$/;"	s	object:configurations.0
description	.vscode/launch.json	/^                    "description": "gdb에 자동 서식 지정 사용",$/;"	s	object:configurations.0.setupCommands.0
echoCommand	.vscode/tasks.json	/^    "echoCommand": true,$/;"	b
el	old/linkage1.c	/^int el;$/;"	v	typeref:typename:int
environment	.vscode/launch.json	/^            "environment": [],$/;"	a	object:configurations.0
externalConsole	.vscode/launch.json	/^            "externalConsole": false,$/;"	b	object:configurations.0
fibonacci	old/fibonacci.c	/^int fibonacci(int number){$/;"	f	typeref:typename:int
files.associations	.vscode/settings.json	/^    "files.associations": {$/;"	o
fit_str	old/variable_strings.c	/^void fit_str(char* str, unsigned int size){$/;"	f	typeref:typename:void
group	.vscode/tasks.json	/^            "group": "test"$/;"	s	object:tasks.2
ignoreFailures	.vscode/launch.json	/^                    "ignoreFailures": true$/;"	b	object:configurations.0.setupCommands.0
il	old/linkage1.c	/^static int il;$/;"	v	typeref:typename:int	file:
int_max	old/variables.c	/^int int_max(int i, int j){$/;"	f	typeref:typename:int
int_min	old/lessor.c	/^int int_min(int i, int j){$/;"	f	typeref:typename:int
label	.vscode/tasks.json	/^            "label": "execute",$/;"	s	object:tasks.2
loop_factorial	old/factorial.c	/^long loop_factorial(int n){$/;"	f	typeref:typename:long
main	beakjoon/plus_cycle.c	/^int main(){$/;"	f	typeref:typename:int
main	ch.12/12-13/12_AllocatedMemory.c	/^int main(){$/;"	f	typeref:typename:int
main	ch.12/12-14/MemoryLeak.c	/^int main(){$/;"	f	typeref:typename:int
main	my_rand/rand_p.c	/^int main(){$/;"	f	typeref:typename:int
main	old/2d_array_and_pointer.c	/^int main(){$/;"	f	typeref:typename:int
main	old/2d_arrow.c	/^int main(){$/;"	f	typeref:typename:int
main	old/Command-Line_Arguments.c	/^int main(int argc, char * argv[]){$/;"	f	typeref:typename:int
main	old/Strings_to_nums.c	/^int main(int argc, char * argv[]){$/;"	f	typeref:typename:int
main	old/VLAs.c	/^int main(){$/;"	f	typeref:typename:int
main	old/array_of_string.c	/^int main(){$/;"	f	typeref:typename:int
main	old/avg_arr.c	/^int main() {$/;"	f	typeref:typename:int
main	old/avg_arr2.c	/^int main(){$/;"	f	typeref:typename:int
main	old/beak.c	/^int main(){$/;"	f	typeref:typename:int
main	old/binary.c	/^int main() {$/;"	f	typeref:typename:int
main	old/const.c	/^int main(){$/;"	f	typeref:typename:int
main	old/const_arr.c	/^int main(){$/;"	f	typeref:typename:int
main	old/factorial.c	/^int main() {$/;"	f	typeref:typename:int
main	old/fibonacci.c	/^int main() {$/;"	f	typeref:typename:int
main	old/function_to_strings.c	/^int main(){$/;"	f	typeref:typename:int
main	old/hello.c	/^int main() {$/;"	f	typeref:typename:int
main	old/input_strings.c	/^int main(){$/;"	f	typeref:typename:int
main	old/lessor.c	/^int main(){$/;"	f	typeref:typename:int
main	old/linkage1.c	/^int main(){$/;"	f	typeref:typename:int
main	old/main.c	/^int main(){$/;"	f	typeref:typename:int
main	old/memory.c	/^int main(){$/;"	f	typeref:typename:int
main	old/memory_rayout.c	/^int main(){$/;"	f	typeref:typename:int
main	old/mutipointer_to_v.c	/^int main(){$/;"	f	typeref:typename:int
main	old/namecards.c	/^int main() {$/;"	f	typeref:typename:int
main	old/output_strings.c	/^int main(){$/;"	f	typeref:typename:int
main	old/point_style.c	/^int main(){$/;"	f	typeref:typename:int
main	old/pointer.c	/^int main(){$/;"	f	typeref:typename:int
main	old/pointer_array.c	/^int main(){$/;"	f	typeref:typename:int
main	old/pointer_test.c	/^int main(){$/;"	f	typeref:typename:int
main	old/rand.c	/^int main(){$/;"	f	typeref:typename:int
main	old/recursion.c	/^int main(){$/;"	f	typeref:typename:int
main	old/selection_sort.c	/^int main() {$/;"	f	typeref:typename:int
main	old/selection_sort_strings.c	/^int main() {$/;"	f	typeref:typename:int
main	old/size_of_pointer.c	/^void main(){$/;"	f	typeref:typename:void
main	old/size_t.c	/^int main(){$/;"	f	typeref:typename:int
main	old/strings.c	/^int main(){$/;"	f	typeref:typename:int
main	old/swap_by_pointer.c	/^int main(){$/;"	f	typeref:typename:int
main	old/test.c	/^int main(){$/;"	f	typeref:typename:int
main	old/variable_strings.c	/^int main(){$/;"	f	typeref:typename:int
main	old/variables.c	/^int main(){$/;"	f	typeref:typename:int
miDebuggerPath	.vscode/launch.json	/^            "miDebuggerPath": "gdb.exe",$/;"	s	object:configurations.0
my_func	old/recursion.c	/^void my_func(int n){$/;"	f	typeref:typename:void
my_rand	my_rand/my_rand.c	/^int my_rand(){$/;"	f	typeref:typename:int
my_srand	my_rand/my_rand.c	/^void my_srand(unsigned int seed){$/;"	f	typeref:typename:void
my_strcat	old/variable_strings.c	/^void my_strcat(char* str1, char* str2){    $/;"	f	typeref:typename:void
my_strcat2	old/variable_strings.c	/^char* my_strcat2(char* str1, char* str2){$/;"	f	typeref:typename:char *
my_strcmp	old/variable_strings.c	/^int my_strcmp(char* str1, char* str2){$/;"	f	typeref:typename:int
my_strcmp2	old/variable_strings.c	/^int my_strcmp2(char* str1, char* str2){$/;"	f	typeref:typename:int
name	.vscode/launch.json	/^            "name": "gcc - 활성 파일 빌드 및 디버그",$/;"	s	object:configurations.0
next	my_rand/my_rand.c	/^static unsigned int next = 1;$/;"	v	typeref:typename:unsigned int	file:
num2arr	old/test.c	/^int num2arr(int num){$/;"	f	typeref:typename:int
preLaunchTask	.vscode/launch.json	/^            "preLaunchTask": "save and compile for C"$/;"	s	object:configurations.0
presentation	.vscode/tasks.json	/^    "presentation" : { "reveal": "always" },$/;"	o
printArray	old/selection_sort.c	/^void printArray(int arr[], int size){$/;"	f	typeref:typename:void
printStringArray	old/selection_sort_strings.c	/^void printStringArray(char* arr[], int size){$/;"	f	typeref:typename:void
print_array	old/const_arr.c	/^void print_array(const int arr[], const int n){$/;"	f	typeref:typename:void
print_binary	old/binary.c	/^void print_binary(unsigned long num){$/;"	f	typeref:typename:void
print_binary_loop	old/binary.c	/^void print_binary_loop(unsigned long num){$/;"	f	typeref:typename:void
print_centered_str	old/namecards.c	/^void print_centered_str(char str[]){$/;"	f	typeref:typename:void
print_hello	old/my_print_functions.c	/^void print_hello(){$/;"	f	typeref:typename:void
print_hi	old/my_print_functions.c	/^void print_hi(){$/;"	f	typeref:typename:void
print_multiple_chars	old/namecards.c	/^void print_multiple_chars(char c, int n_stars, bool print_newline){$/;"	f	typeref:typename:void
print_str	old/my_print_functions.c	/^void print_str(char* str){$/;"	f	typeref:typename:void
program	.vscode/launch.json	/^            "program": "${fileDirname}\\\\${fileBasenameNoExtension}.exe",$/;"	s	object:configurations.0
recursive_factorial	old/factorial.c	/^long recursive_factorial(int n){$/;"	f	typeref:typename:long
request	.vscode/launch.json	/^            "request": "launch",$/;"	s	object:configurations.0
reveal	.vscode/tasks.json	/^    "presentation" : { "reveal": "always" },$/;"	s	object:presentation
runner	.vscode/tasks.json	/^    "runner": "terminal",$/;"	s
selectionSort	old/selection_sort.c	/^void selectionSort(int arr[], int n){$/;"	f	typeref:typename:void
selectionSort	old/selection_sort_strings.c	/^void selectionSort(char* arr[], int n){$/;"	f	typeref:typename:void
selectionSortR	old/selection_sort.c	/^void selectionSortR(int arr[], int n){$/;"	f	typeref:typename:void
selectionSortR	old/selection_sort_strings.c	/^void selectionSortR(char* arr[], int n){$/;"	f	typeref:typename:void
setupCommands	.vscode/launch.json	/^            "setupCommands": [$/;"	a	object:configurations.0
stdio.h	.vscode/settings.json	/^        "stdio.h": "c"$/;"	s	object:files.associations
stopAtEntry	.vscode/launch.json	/^            "stopAtEntry": false,$/;"	b	object:configurations.0
sum	old/const_arr.c	/^int sum(const int ar[], const int n){$/;"	f	typeref:typename:int
sum2d_1	old/mutipointer_to_v.c	/^int sum2d_1(int ar[ROWS][COLS]){$/;"	f	typeref:typename:int
sum2d_2	old/mutipointer_to_v.c	/^int sum2d_2(int ar[][COLS], int row){$/;"	f	typeref:typename:int
sum2d_3	old/mutipointer_to_v.c	/^int sum2d_3(int* ar, int row, int col){$/;"	f	typeref:typename:int
swap	old/selection_sort.c	/^void swap(int* xp, int* yp){$/;"	f	typeref:typename:void
swap	old/selection_sort_strings.c	/^void swap(char** xp, char** yp){$/;"	f	typeref:typename:void
swap	old/swap_by_pointer.c	/^void swap(int *a, int *b){$/;"	f	typeref:typename:void
tasks	.vscode/tasks.json	/^    "tasks": [$/;"	a
testLinkage	old/linkage2.c	/^void testLinkage(){$/;"	f	typeref:typename:void
test_function	old/memory_rayout.c	/^void test_function(){$/;"	f	typeref:typename:void
text	.vscode/launch.json	/^                    "text": "-enable-pretty-printing",$/;"	s	object:configurations.0.setupCommands.0
type	.vscode/launch.json	/^            "type": "cppdbg",$/;"	s	object:configurations.0
type	.vscode/tasks.json	/^    "type": "shell",$/;"	s
version	.vscode/tasks.json	/^    "version": "2.0.0",$/;"	s
